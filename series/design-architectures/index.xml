<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Architectures on</title><link>https://gosang.github.io/series/design-architectures/</link><description>Recent content in Design Architectures on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 16 May 2023 13:58:28 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/design-architectures/index.xml" rel="self" type="application/rss+xml"/><item><title>Domain Driven Design (DDD)</title><link>https://gosang.github.io/posts/design-architectures/domain-driven-design/</link><pubDate>Tue, 16 May 2023 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-architectures/domain-driven-design/</guid><description>Domain Driven Design (DDD) is a methodology that empowers developers to create software systems closely aligned with the complexities of real-world business domains. In this comprehensive guide, we will explore the fundamentals of DDD, its core concepts, and practical applications within an e-commerce system using C# .NET Core.
Understanding Domain Driven Design (DDD) At its essence, Domain Driven Design is an approach to software development that emphasizes collaboration between domain experts and developers.</description></item><item><title>Vertical Slice Architecture</title><link>https://gosang.github.io/posts/design-architectures/vertical-slice-architecture/</link><pubDate>Sat, 07 Aug 2021 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-architectures/vertical-slice-architecture/</guid><description>In the fast-paced world of software development, architects and developers are always on the lookout for innovative approaches to structure code efficiently. One such approach gaining traction is the Vertical Slice Architecture. In this blog post, we&amp;rsquo;ll embark on a journey to understand what Vertical Slice Architecture is, its rationale, and how it resolves common development challenges. We&amp;rsquo;ll explore its implementation in a .NET 6 e-commerce system using MediatR, AutoMapper, EF Core, and xUnit, highlighting its advantages, disadvantages, use cases, and best practices.</description></item><item><title>Event-Driven Architecture</title><link>https://gosang.github.io/posts/design-architectures/event-driven-architecture/</link><pubDate>Sun, 25 Apr 2021 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-architectures/event-driven-architecture/</guid><description>Event-Driven Architecture (EDA) has become a pivotal design paradigm in building scalable, loosely-coupled systems. In this blog, we&amp;rsquo;ll delve into the core concepts of Event-Driven Architecture, its implementation in the context of an e-commerce system using C# .NET Core, and explore its advantages, disadvantages, issues, and best practices.
What is Event-Driven Architecture? At its core, Event-Driven Architecture is a design pattern that orchestrates the flow of information between different components or services through events.</description></item><item><title>Microservices Design Architecture</title><link>https://gosang.github.io/posts/design-architectures/microservices/</link><pubDate>Tue, 30 Jun 2020 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-architectures/microservices/</guid><description>In the ever-evolving landscape of software development, Microservices Design Architecture has emerged as a game-changer. This architectural paradigm brings flexibility, scalability, and maintainability to the forefront. In this blog, we&amp;rsquo;ll take a deep dive into what microservices are, their key concepts, design architecture, and when to leverage this approach for building robust systems.
What are Microservices? Microservices is an architectural style where a software application is composed of small, independent services that communicate with each other through well-defined APIs.</description></item><item><title>Modular Monolith Architecture</title><link>https://gosang.github.io/posts/design-architectures/modular-monolith-architecture/</link><pubDate>Sun, 03 May 2020 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-architectures/modular-monolith-architecture/</guid><description>In the ever-evolving landscape of software development, choosing the right architecture is crucial for building scalable, maintainable, and efficient applications. One architecture gaining popularity is the Modular Monolith Architecture. In this blog, we&amp;rsquo;ll explore what this architecture entails, its key components, advantages, disadvantages, use cases, and best practices.
What is Modular Monolith Architecture? Modular Monolith Architecture is an approach that combines the modularity of microservices with the simplicity of a monolith architecture.</description></item><item><title>Clean Architecture</title><link>https://gosang.github.io/posts/design-architectures/clean-architecture/</link><pubDate>Mon, 02 Mar 2020 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-architectures/clean-architecture/</guid><description>In the ever-evolving world of software development, architects and developers are in pursuit of a design pattern that not only ensures the maintainability of their applications but also enables scalability and adaptability. Clean Architecture, a concept popularized by Uncle Bob (Robert C. Martin), has gained prominence for its ability to provide a structured approach to software design. In this blog post, we will explore Clean Architecture comprehensively, covering its key concepts, components, rationale, and real-world implementation in the context of an online shopping system.</description></item></channel></rss>