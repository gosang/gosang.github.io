<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on</title><link>https://gosang.github.io/series/kubernetes/</link><description>Recent content in Kubernetes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 11 Feb 2024 11:39:28 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying Applications With Helm: Simplifying Kubernetes Orchestration</title><link>https://gosang.github.io/posts/devops/kubernetes/deploying-applications-with-helm-simplifying-kubernetes-orchestration/</link><pubDate>Sun, 11 Feb 2024 11:39:28 +0000</pubDate><guid>https://gosang.github.io/posts/devops/kubernetes/deploying-applications-with-helm-simplifying-kubernetes-orchestration/</guid><description>Introduction Deploying applications in Kubernetes can be complex, especially as your infrastructure grows. Helm, an open-source package manager, addresses this challenge by providing a templating and packaging system for Kubernetes manifests. In this blog post, we&amp;rsquo;ll explore Helm, its rationale, implementation, and usage in the context of microservices or modular monolithic architectures.
What is Helm? Helm is a tool designed to streamline the deployment and management of applications on Kubernetes. Think of it as the package manager for Kubernetes, simplifying the process of defining, installing, and upgrading even the most complex applications.</description></item><item><title>Configuring Resources With YAML Manifests in Kubernetes</title><link>https://gosang.github.io/posts/devops/kubernetes/configuring-resources-with-yaml-manifests-in-kubernetes/</link><pubDate>Sun, 04 Feb 2024 16:42:31 +0000</pubDate><guid>https://gosang.github.io/posts/devops/kubernetes/configuring-resources-with-yaml-manifests-in-kubernetes/</guid><description>Introduction Configuring resources in Kubernetes is a fundamental aspect of managing containerized applications. The use of YAML manifests allows developers and operators to define the desired state of their applications, making it easy to manage, deploy, and scale applications in a consistent manner. In this blog post, we will explore the concept of configuring resources with YAML manifests, its implementation, and its relevance in the context of microservices or modular monolithic architectures.</description></item><item><title>Understanding Kubernetes: A Developer`s Guide</title><link>https://gosang.github.io/posts/devops/kubernetes/understanding-kubernetes-a-developer-guide/</link><pubDate>Sat, 03 Feb 2024 13:34:00 +0000</pubDate><guid>https://gosang.github.io/posts/devops/kubernetes/understanding-kubernetes-a-developer-guide/</guid><description>Introduction In recent years, the landscape of software development and deployment has undergone a significant transformation. The demand for scalable, resilient, and easily manageable applications has led to the rise of container orchestration tools, with Kubernetes standing out as a powerful and widely adopted solution. In this blog post, we will delve into the world of Kubernetes, exploring its fundamentals, components, advantages, disadvantages, use cases, and best practices.
What is Kubernetes?</description></item></channel></rss>