<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Structural Design Patterns on</title><link>https://gosang.github.io/series/structural-design-patterns/</link><description>Recent content in Structural Design Patterns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Jul 2022 13:13:29 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/structural-design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Bridge Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/bridge-pattern/</link><pubDate>Sun, 17 Jul 2022 13:13:29 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/bridge-pattern/</guid><description>In the realm of software design patterns, the Bridge pattern stands out as a powerful tool for enhancing flexibility and maintainability. This pattern belongs to the structural design patterns, emphasizing the decoupling of abstraction from implementation. In this blog post, we&amp;rsquo;ll delve into the intricacies of the Bridge pattern, its rationale, usage in microservices, and practical implementations in a C# .NET Core e-commerce system.
Bridge Pattern Overview The Bridge pattern is a structural pattern that separates abstraction from its implementation so that both can evolve independently without affecting each other.</description></item><item><title>Interpreter Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/interpreter-pattern/</link><pubDate>Tue, 28 Jun 2022 13:00:16 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/interpreter-pattern/</guid><description>In the realm of design patterns, the Interpreter pattern stands out as a powerful tool for solving specific types of problems. This blog post will delve into the intricacies of the Interpreter pattern, exploring what it is, its rationale, applications in the context of microservices or modular monolithic architectures, and providing practical examples using C# .NET Core.
What is the Interpreter Pattern? The Interpreter pattern falls under the behavioral design patterns category.</description></item><item><title>Composite Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/composite-pattern/</link><pubDate>Thu, 16 Jun 2022 12:56:42 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/composite-pattern/</guid><description>The Composite Pattern is a structural design pattern that allows you to compose objects into tree structures to represent part-whole hierarchies. This pattern lets clients treat individual objects and compositions of objects uniformly. In simpler terms, it enables you to work with both individual objects and groups of objects in a unified manner.
Rationale behind the Composite Pattern The primary goal of the Composite Pattern is to treat individual objects and compositions of objects uniformly.</description></item></channel></rss>