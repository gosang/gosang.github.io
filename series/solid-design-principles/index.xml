<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SOLID Design Principles on</title><link>https://gosang.github.io/series/solid-design-principles/</link><description>Recent content in SOLID Design Principles on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Apr 2023 13:13:36 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/solid-design-principles/index.xml" rel="self" type="application/rss+xml"/><item><title>Liskov Substitution Principle (LSP)</title><link>https://gosang.github.io/posts/design-principles/liskov-substitution-principle/</link><pubDate>Sat, 01 Apr 2023 13:13:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/liskov-substitution-principle/</guid><description>In the realm of object-oriented design, the Liskov Substitution Principle (LSP) stands as a guiding light, emphasizing the importance of substitutability among objects of a base class and its derived classes. Coined by Barbara Liskov, this principle ensures that derived classes can be used interchangeably with their base classes without affecting the correctness of the program. In this blog post, we will delve into the Liskov Substitution Principle, its rationale, practical examples in C# .</description></item><item><title>Open-Closed Principle (OCP)</title><link>https://gosang.github.io/posts/design-principles/open-closed-principle/</link><pubDate>Sat, 11 Feb 2023 13:13:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/open-closed-principle/</guid><description>In the world of software design, the Open-Closed Principle (OCP) stands tall as a beacon of extensibility and adaptability. Introduced by Bertrand Meyer, this principle advocates that a class should be open for extension but closed for modification. In this blog post, we will explore the Open-Closed Principle, understand its rationale, and see how it can be applied in the context of e-commerce, particularly in order management, shopping cart, and pricing modules.</description></item><item><title>Single Responsibility Principle (SRP)</title><link>https://gosang.github.io/posts/design-principles/single-responsibility-principle/</link><pubDate>Thu, 02 Feb 2023 13:13:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/single-responsibility-principle/</guid><description>In the realm of software design, the Single Responsibility Principle (SRP) is a fundamental guideline that advocates a class should have only one reason to change. Put simply, a class should have a single responsibility or, in other words, it should do one thing and do it well. This blog post will explore the SRP design principle, its rationale, practical examples in C# .NET Core, and its application.
What is SRP?</description></item></channel></rss>