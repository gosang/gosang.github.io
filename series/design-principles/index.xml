<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Principles on</title><link>https://gosang.github.io/series/design-principles/</link><description>Recent content in Design Principles on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Dec 2022 08:43:48 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/design-principles/index.xml" rel="self" type="application/rss+xml"/><item><title>Feature Flags</title><link>https://gosang.github.io/posts/design-principles/feature-flags/</link><pubDate>Mon, 05 Dec 2022 08:43:48 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/feature-flags/</guid><description>In the fast-paced world of software development, adapting to changing requirements and user needs is crucial. Feature Flags or Feature Toggles, emerge as a powerful technique to enable or disable features in a system without changing code. This blog explores what Feature Flags are, their rationale, advantages over conventional approaches, and practical implementation in a .NET 6 e-commerce system.
What are Feature Flags? Feature Flags are a development technique that allows developers to flag/toggle features in a system on or off at runtime without modifying code.</description></item><item><title>SOLID Design Principles</title><link>https://gosang.github.io/posts/design-principles/solid/solid/</link><pubDate>Thu, 01 Sep 2022 13:13:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/solid/solid/</guid><description>SOLID is a set of five design principles that aim to create robust, scalable, and maintainable software. These principles were introduced by Robert C. Martin and have become a cornerstone for object-oriented design. In this blog post, we&amp;rsquo;ll delve into each SOLID principle, discuss their rationale, provide practical examples in C# .NET Core, and explore how they can be applied in both monolithic and microservices architectures.
What is SOLID? SOLID is an acronym that represents five design principles:</description></item><item><title>DRY Design Principle</title><link>https://gosang.github.io/posts/design-principles/dry/</link><pubDate>Thu, 11 Aug 2022 13:26:13 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/dry/</guid><description>In the realm of software development, the Don&amp;rsquo;t-Repeat-Yourself (DRY) design principle stands as a cornerstone, emphasizing the importance of avoiding redundancy in code. This principle is more than just a catchy phrase; it&amp;rsquo;s a philosophy that guides developers toward writing efficient, maintainable, and scalable code. In this blog, we&amp;rsquo;ll delve into the essence of DRY, its rationale, its application in microservices and modular monolithic architectures, and its practical implementation in an e-commerce system using C# dot net core examples.</description></item><item><title>Implementing Event Bus With Rabbitmq in Dotnet Core</title><link>https://gosang.github.io/posts/design-principles/messaging/implementing-event-bus-with-rabbitmq-in-dotnet-core/</link><pubDate>Sat, 30 Jul 2022 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/messaging/implementing-event-bus-with-rabbitmq-in-dotnet-core/</guid><description>As a Software Engineer, you understand the importance of efficient communication between components in a distributed system. In this blog post, we&amp;rsquo;ll explore the implementation of an event bus with RabbitMQ in .NET Core, focusing on an e-commerce system built using .NET Core services and APIs. We&amp;rsquo;ll leverage MediatR for CQRS, AutoMapper for object mapping, EF Core InMemory database for simplicity, and xUnit for unit tests. Let&amp;rsquo;s dive into the rationale, implementation steps, advantages, and best practices.</description></item><item><title>Using RabbitMQ with ASP.NET Core</title><link>https://gosang.github.io/posts/design-principles/messaging/rabbitmq-with-dotnet-core/</link><pubDate>Wed, 29 Jun 2022 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/messaging/rabbitmq-with-dotnet-core/</guid><description>In the ever-evolving landscape of modern software development, efficient communication between components is crucial. As applications grow in complexity and adopt microservices architecture, a reliable message broker is essential. RabbitMQ, a powerful open-source message broker, has become a cornerstone technology for achieving scalable and robust communication between different parts of an application. In this blog, we will dive deep into RabbitMQ, explain its rationale, explore how it resolves common problems, and demonstrate its usage with ASP.</description></item><item><title>gRPC: Revolutionizing Communication in Modern Microservices with .NET Core</title><link>https://gosang.github.io/posts/design-principles/microservices/grpc/</link><pubDate>Sat, 28 May 2022 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/microservices/grpc/</guid><description>Introduction In the dynamic landscape of microservices architecture, efficient communication between services is paramount. Enter gRPC, which stands for gRPC Remote Procedure Call. It&amp;rsquo;s a high-performance, open-source RPC (Remote Procedure Call) framework developed by Google. In this blog post, we&amp;rsquo;ll delve into the intricacies of gRPC, explore its application in the context of a .NET 6 e-commerce system, and discuss best practices and use cases.
Understanding gRPC What is gRPC? gRPC is a framework that facilitates communication between distributed systems by enabling clients to make calls to methods on a server application as if it were a local object.</description></item><item><title>Understanding Idempotency in Microservices with .NET Core</title><link>https://gosang.github.io/posts/design-principles/microservices/idempotency/</link><pubDate>Mon, 25 Apr 2022 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/microservices/idempotency/</guid><description>Introduction In distributed systems and microservices architecture, ensuring the reliability and consistency of operations becomes a critical challenge. One key concept that plays a pivotal role in addressing this challenge is Idempotency. In this blog post, we&amp;rsquo;ll delve into the meaning of Idempotency, explore its rationale, understand its applications in the context of microservices (using .NET Core), and discuss the advantages, disadvantages, and best practices associated with it.
What is Idempotency?</description></item><item><title>Apache Kafka With Dotnet Core</title><link>https://gosang.github.io/posts/design-principles/messaging/apache-kafka-with-dotnet-core/</link><pubDate>Sat, 09 Apr 2022 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/messaging/apache-kafka-with-dotnet-core/</guid><description>Introduction Apache Kafka has emerged as a game-changer in the realm of distributed systems, offering a robust and scalable solution for building event-driven architectures. In this technical blog, we will delve into the intricacies of Apache Kafka, exploring its core concepts, implementation in a .NET Core e-commerce system, and discussing the advantages, disadvantages, issues, and best practices associated with its use.
Understanding Apache Kafka What is Apache Kafka? Apache Kafka is a distributed streaming platform that excels at handling real-time data feeds and creating scalable, fault-tolerant, and high-throughput messaging systems.</description></item></channel></rss>