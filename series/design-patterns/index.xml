<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Patterns on</title><link>https://gosang.github.io/series/design-patterns/</link><description>Recent content in Design Patterns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Mar 2023 08:49:40 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Event Sourcing Pattern</title><link>https://gosang.github.io/posts/design-patterns/event-sourcing-pattern/</link><pubDate>Sat, 18 Mar 2023 08:49:40 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/event-sourcing-pattern/</guid><description>Event Sourcing is a powerful design pattern that has gained significant traction in the software development world. This pattern offers a novel approach to managing data changes, particularly in the context of microservices and modular monolithic architectures. In this guide, we will provide a detailed exploration of Event Sourcing, covering what it is, why it&amp;rsquo;s used, practical examples using C# .NET Core, the advantages and disadvantages, when to use it, and best practices.</description></item><item><title>Command Query Responsibility Segregation (CQRS)</title><link>https://gosang.github.io/posts/design-patterns/command-query-responsibility-segregation/</link><pubDate>Wed, 01 Mar 2023 19:18:44 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/command-query-responsibility-segregation/</guid><description>In the ever-evolving world of software architecture, Command Query Responsibility Segregation (CQRS) has emerged as a powerful design pattern. CQRS is all about separating the responsibilities of executing commands (actions that change the state of an application) and handling queries (read-only operations).
In this article, we&amp;rsquo;ll delve deep into CQRS, exploring what it is, the rationale behind it, the problems it solves, practical usage with C# .NET Core Web API and repositories, and its advantages and disadvantages.</description></item><item><title>Null Object Pattern</title><link>https://gosang.github.io/posts/design-patterns/null-object-pattern/</link><pubDate>Fri, 06 May 2022 12:18:18 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/null-object-pattern/</guid><description>In the world of software development, handling null values can be a persistent challenge. The Null Object pattern is a design pattern that addresses this challenge by providing a systematic way to represent and handle null objects. This blog post aims to explore the Null Object pattern in-depth, covering its definition, rationale, usage, implementation in C# .NET Core with CacheStorage, advantages, disadvantages, use cases, and best practices.
Understanding the Null Object Pattern What is the Null Object Pattern?</description></item><item><title>Repository Unit of Work</title><link>https://gosang.github.io/posts/design-patterns/repository-unit-of-work/</link><pubDate>Sat, 12 Feb 2022 08:56:22 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/repository-unit-of-work/</guid><description>In the ever-evolving landscape of software architecture and data management, certain design patterns stand out as foundational concepts that can greatly improve the organization and maintainability of your applications. Among these, the Repository Pattern and the Unit of Work Pattern are two of the most vital. In this comprehensive guide, we&amp;rsquo;ll explore these patterns in depth, understand their significance, and learn how to wield them effectively in a C# .NET Core Web API, harnessing the capabilities of Entity Framework Core 6.</description></item><item><title>Repository Pattern</title><link>https://gosang.github.io/posts/design-patterns/repository-pattern/</link><pubDate>Sat, 29 Jan 2022 08:43:48 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/repository-pattern/</guid><description>In the realm of software development, maintaining a clean, organized, and efficient codebase is paramount. One of the key design patterns that facilitates this is the Repository Pattern. In this comprehensive guide, we&amp;rsquo;ll embark on a journey to understand the Repository Pattern from the ground up, exploring its purpose, the problems it elegantly resolves, and how to employ it in a C# .NET Core Web API powered by Entity Framework Core 6.</description></item></channel></rss>