<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Creational Design Patterns on</title><link>https://gosang.github.io/series/creational-design-patterns/</link><description>Recent content in Creational Design Patterns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Jul 2022 13:09:32 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/creational-design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Prototype Pattern</title><link>https://gosang.github.io/posts/design-patterns/creational/prototype-pattern/</link><pubDate>Mon, 04 Jul 2022 13:09:32 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/creational/prototype-pattern/</guid><description>The Prototype pattern is a creational design pattern that focuses on creating objects by copying an existing object, known as the prototype. This pattern allows you to create new objects by duplicating an existing one, providing a convenient way to produce new instances without specifying their exact types. In this blog post, we&amp;rsquo;ll explore the Prototype pattern, its rationale, implementation in C# .NET Core, and its relevance in the context of microservices and modular monolithic architectures.</description></item></channel></rss>