<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Creational Design Patterns on</title><link>https://gosang.github.io/series/creational-design-patterns/</link><description>Recent content in Creational Design Patterns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Dec 2021 13:19:18 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/creational-design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Factory Pattern</title><link>https://gosang.github.io/posts/design-patterns/creational/factory-pattern/</link><pubDate>Sun, 05 Dec 2021 13:19:18 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/creational/factory-pattern/</guid><description>Design patterns play a crucial role in creating modular, scalable, and maintainable software. Among them, Factory Patterns are widely used to encapsulate object creation, providing a flexible way to instantiate objects without specifying their exact classes. In this blog, we&amp;rsquo;ll explore three types of Factory Patterns: Concrete, Static, and Abstract, discussing their rationale, usage in an e-commerce system with C# .NET Core examples, advantages, disadvantages, and best practices.
Factory Patterns Overview What is a Factory Pattern?</description></item><item><title>Prototype Pattern</title><link>https://gosang.github.io/posts/design-patterns/creational/prototype-pattern/</link><pubDate>Fri, 04 Sep 2020 13:09:32 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/creational/prototype-pattern/</guid><description>The Prototype pattern is a creational design pattern that focuses on creating objects by copying an existing object, known as the prototype. This pattern allows you to create new objects by duplicating an existing one, providing a convenient way to produce new instances without specifying their exact types. In this blog post, we&amp;rsquo;ll explore the Prototype pattern, its rationale, implementation in C# .NET Core, and its relevance in the context of microservices and modular monolithic architectures.</description></item><item><title>Singleton Pattern</title><link>https://gosang.github.io/posts/design-patterns/creational/singleton-pattern/</link><pubDate>Tue, 16 Jun 2020 12:23:54 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/creational/singleton-pattern/</guid><description>Introduction Design patterns play a crucial role in software development, providing proven solutions to recurring problems. One such pattern is the Singleton pattern, a creational design pattern that ensures a class has only one instance and provides a global point of access to it.
What is the Singleton Pattern? The Singleton pattern restricts the instantiation of a class to a single instance and provides a global point of access to that instance.</description></item></channel></rss>