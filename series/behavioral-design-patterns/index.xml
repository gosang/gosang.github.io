<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Behavioral Design Patterns on</title><link>https://gosang.github.io/series/behavioral-design-patterns/</link><description>Recent content in Behavioral Design Patterns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Mar 2023 08:28:08 +0000</lastBuildDate><atom:link href="https://gosang.github.io/series/behavioral-design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Mediator Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/mediator-pattern/</link><pubDate>Fri, 10 Mar 2023 08:28:08 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/mediator-pattern/</guid><description>In the realm of software design, the Mediator Pattern shines as a potent tool for simplifying complex systems, promoting loose coupling, and improving maintainability. Whether you&amp;rsquo;re developing microservices or working on modular monolithic applications, the Mediator Pattern can be a game-changer.
In this blog, we&amp;rsquo;ll dive deep into the Mediator Pattern, uncovering what it is, the rationale behind it, the problems it addresses, and how to implement it using .NET Core.</description></item><item><title>Observer Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/observer-pattern/</link><pubDate>Tue, 07 Jun 2022 12:40:53 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/observer-pattern/</guid><description>In software development, designing systems that are flexible, scalable, and maintainable is paramount. One of the key challenges is establishing a communication mechanism between components without tight coupling. The Observer pattern provides an elegant solution to this problem. In this blog, we&amp;rsquo;ll delve into the intricacies of the Observer pattern, explore its applications in an e-commerce system using C# .NET Core, and discuss best practices.
Understanding the Observer Pattern The Observer pattern is a behavioral design pattern where an object, known as the subject, maintains a list of its dependents, called observers, that are notified of state changes.</description></item><item><title>State Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/state-pattern/</link><pubDate>Sat, 28 May 2022 12:28:51 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/state-pattern/</guid><description>State Pattern
Introduction In the ever-evolving landscape of software design, patterns play a crucial role in enhancing maintainability, scalability, and flexibility of code. One such design pattern that proves invaluable in managing state-dependent behavior is the State Pattern. In this blog post, we&amp;rsquo;ll delve into the State Pattern, exploring its rationale, application in real-world scenarios, and its advantages and disadvantages.
What is the State Pattern? The State Pattern is a behavioral design pattern that allows an object to alter its behavior when its internal state changes.</description></item><item><title>Visitor Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/visitor-pattern/</link><pubDate>Wed, 23 Mar 2022 12:23:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/visitor-pattern/</guid><description>The Visitor Pattern is a design pattern that provides a way to separate the algorithm from the object structure it operates on. It is a powerful and flexible pattern that is often used to add new operations to a set of classes without modifying their source code. In this blog, we will dive deep into the Visitor Pattern, explore its rationale, benefits, and drawbacks, and provide real-world examples in the context of a .</description></item><item><title>Template Method Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/template-method-pattern/</link><pubDate>Fri, 18 Mar 2022 12:24:18 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/template-method-pattern/</guid><description>The Template Method Pattern is a fundamental design pattern in software development that provides a framework for defining the structure of an algorithm while allowing specific steps of the algorithm to be implemented by derived classes. In this blog, we will explore the Template Method Pattern in detail, including its rationale, how it&amp;rsquo;s used in C# .NET Core, and its relevance in both microservices and modular monolithic applications. We&amp;rsquo;ll also delve into its advantages and disadvantages, use cases, best practices, and recommendations.</description></item><item><title>Chain of Responsibility Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/chain-of-responsibility-pattern/</link><pubDate>Tue, 01 Mar 2022 12:22:44 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/chain-of-responsibility-pattern/</guid><description>The Chain of Responsibility Pattern is a behavioral design pattern that allows you to pass requests along a chain of handlers. Each handler can choose to process the request or pass it to the next handler in the chain. This pattern promotes loose coupling between the sender and receiver of a request, making it a powerful tool in building extensible and maintainable software systems. In this blog, we will explore what the Chain of Responsibility Pattern is, its rationale, how it can be used in C# .</description></item><item><title>Strategy Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/strategy-pattern/</link><pubDate>Tue, 15 Feb 2022 11:26:09 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/strategy-pattern/</guid><description>When designing software systems, it&amp;rsquo;s essential to create flexible and maintainable code. One way to achieve this is by using design patterns, which are well-established solutions to common software design problems. The Strategy Pattern is one such pattern that offers a structured approach to defining a family of algorithms and making them interchangeable.
In this blog post, we&amp;rsquo;ll explore the Strategy Pattern in detail, its rationale, how it solves problems, and its application in various contexts, including microservices and modular monolithic architectures, using C# .</description></item></channel></rss>