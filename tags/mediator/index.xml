<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mediator on</title><link>https://gosang.github.io/tags/mediator/</link><description>Recent content in Mediator on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Mar 2023 08:28:08 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/mediator/index.xml" rel="self" type="application/rss+xml"/><item><title>Mediator Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/mediator-pattern/</link><pubDate>Fri, 10 Mar 2023 08:28:08 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/mediator-pattern/</guid><description>In the realm of software design, the Mediator Pattern shines as a potent tool for simplifying complex systems, promoting loose coupling, and improving maintainability. Whether you&amp;rsquo;re developing microservices or working on modular monolithic applications, the Mediator Pattern can be a game-changer.
In this blog, we&amp;rsquo;ll dive deep into the Mediator Pattern, uncovering what it is, the rationale behind it, the problems it addresses, and how to implement it using .NET Core.</description></item></channel></rss>