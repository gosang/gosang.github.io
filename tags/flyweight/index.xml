<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flyweight on</title><link>https://gosang.github.io/tags/flyweight/</link><description>Recent content in Flyweight on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Apr 2022 12:28:06 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/flyweight/index.xml" rel="self" type="application/rss+xml"/><item><title>Flyweight Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/flyweight-pattern/</link><pubDate>Tue, 05 Apr 2022 12:28:06 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/flyweight-pattern/</guid><description>The Flyweight design pattern is a structural pattern that falls under the category of design patterns in software engineering. It is used to optimize memory usage or computational resources by sharing as much as possible with related objects. The Flyweight pattern is particularly valuable when you need to create a large number of similar objects and you want to conserve resources.
In this blog, we will delve into the Flyweight design pattern, its rationale, how it resolves common problems, and how to implement it using C# .</description></item></channel></rss>