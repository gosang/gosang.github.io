<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Strategy on</title><link>https://gosang.github.io/tags/strategy/</link><description>Recent content in Strategy on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Feb 2022 11:26:09 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/strategy/index.xml" rel="self" type="application/rss+xml"/><item><title>Strategy Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/strategy-pattern/</link><pubDate>Tue, 15 Feb 2022 11:26:09 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/strategy-pattern/</guid><description>When designing software systems, it&amp;rsquo;s essential to create flexible and maintainable code. One way to achieve this is by using design patterns, which are well-established solutions to common software design problems. The Strategy Pattern is one such pattern that offers a structured approach to defining a family of algorithms and making them interchangeable.
In this blog post, we&amp;rsquo;ll explore the Strategy Pattern in detail, its rationale, how it solves problems, and its application in various contexts, including microservices and modular monolithic architectures, using C# .</description></item></channel></rss>