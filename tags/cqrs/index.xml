<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CQRS on</title><link>https://gosang.github.io/tags/cqrs/</link><description>Recent content in CQRS on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Mar 2023 19:18:44 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/cqrs/index.xml" rel="self" type="application/rss+xml"/><item><title>Command Query Responsibility Segregation (CQRS)</title><link>https://gosang.github.io/posts/design-patterns/command-query-responsibility-segregation/</link><pubDate>Wed, 01 Mar 2023 19:18:44 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/command-query-responsibility-segregation/</guid><description>In the ever-evolving world of software architecture, Command Query Responsibility Segregation (CQRS) has emerged as a powerful design pattern. CQRS is all about separating the responsibilities of executing commands (actions that change the state of an application) and handling queries (read-only operations).
In this article, we&amp;rsquo;ll delve deep into CQRS, exploring what it is, the rationale behind it, the problems it solves, practical usage with C# .NET Core Web API and repositories, and its advantages and disadvantages.</description></item></channel></rss>