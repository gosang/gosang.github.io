<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on</title><link>https://gosang.github.io/tags/javascript/</link><description>Recent content in JavaScript on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Jan 2025 20:34:35 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Callback Promise Async Await in Javascript</title><link>https://gosang.github.io/posts/react/callback-promise-async-await-in-javascript/</link><pubDate>Mon, 20 Jan 2025 20:34:35 +0000</pubDate><guid>https://gosang.github.io/posts/react/callback-promise-async-await-in-javascript/</guid><description>JavaScript is a single-threaded language, which means it executes one operation at a time. But real-world applications often need to handle multiple tasks, like fetching data, reading files, or waiting for user input. To manage these asynchronous operations, JavaScript provides Callbacks, Promises, and Async/Await. This blog explores these tools in depth, covering their rationale, usage, advantages, and challenges.
1. Callback A Callback is a function passed as an argument to another function and executed after the completion of that function.</description></item></channel></rss>