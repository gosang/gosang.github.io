<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bridge on</title><link>https://gosang.github.io/tags/bridge/</link><description>Recent content in Bridge on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 Jul 2020 13:13:29 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/bridge/index.xml" rel="self" type="application/rss+xml"/><item><title>Bridge Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/bridge-pattern/</link><pubDate>Fri, 17 Jul 2020 13:13:29 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/bridge-pattern/</guid><description>In the realm of software design patterns, the Bridge pattern stands out as a powerful tool for enhancing flexibility and maintainability. This pattern belongs to the structural design patterns, emphasizing the decoupling of abstraction from implementation. In this blog post, we&amp;rsquo;ll look into the intricacies of the Bridge pattern, its rationale, usage in microservices, and practical implementations in a C# .NET Core e-commerce system.
Bridge Pattern Overview The Bridge pattern is a structural pattern that separates abstraction from its implementation so that both can evolve independently without affecting each other.</description></item></channel></rss>