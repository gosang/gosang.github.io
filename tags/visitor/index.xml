<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visitor on</title><link>https://gosang.github.io/tags/visitor/</link><description>Recent content in Visitor on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Sep 2022 12:23:36 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/visitor/index.xml" rel="self" type="application/rss+xml"/><item><title>Visitor Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/visitor-pattern/</link><pubDate>Sat, 03 Sep 2022 12:23:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/visitor-pattern/</guid><description>The Visitor Pattern is a design pattern that provides a way to separate the algorithm from the object structure it operates on. It is a powerful and flexible pattern that is often used to add new operations to a set of classes without modifying their source code. In this blog, we will dive deep into the Visitor Pattern, explore its rationale, benefits, and drawbacks, and provide real-world examples in the context of a .</description></item></channel></rss>