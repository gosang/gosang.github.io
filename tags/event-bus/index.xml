<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Event Bus on</title><link>https://gosang.github.io/tags/event-bus/</link><description>Recent content in Event Bus on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 30 Jul 2022 13:58:28 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/event-bus/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Event Bus With Rabbitmq in Dotnet Core</title><link>https://gosang.github.io/posts/design-principles/messaging/implementing-event-bus-with-rabbitmq-in-dotnet-core/</link><pubDate>Sat, 30 Jul 2022 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/messaging/implementing-event-bus-with-rabbitmq-in-dotnet-core/</guid><description>As a Software Engineer, you understand the importance of efficient communication between components in a distributed system. In this blog post, we&amp;rsquo;ll explore the implementation of an event bus with RabbitMQ in .NET Core, focusing on an e-commerce system built using .NET Core services and APIs. We&amp;rsquo;ll leverage MediatR for CQRS, AutoMapper for object mapping, EF Core InMemory database for simplicity, and xUnit for unit tests. Let&amp;rsquo;s dive into the rationale, implementation steps, advantages, and best practices.</description></item></channel></rss>