<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ASP.Net Core on</title><link>https://gosang.github.io/tags/asp.net-core/</link><description>Recent content in ASP.Net Core on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Mar 2022 18:01:02 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/asp.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>Mongodb Atlas With .NET Core</title><link>https://gosang.github.io/posts/datastore/mongodb-atlas-with-dotnet-core/</link><pubDate>Sun, 27 Mar 2022 18:01:02 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/mongodb-atlas-with-dotnet-core/</guid><description>Introduction In modern web development, choosing the right database solution is pivotal to building scalable and robust applications. MongoDB Atlas, coupled with ASP.NET Core, offers a compelling combination for developers seeking flexibility, scalability, and ease of development. This technical blog aims to provide a comprehensive understanding of MongoDB Atlas, its integration with ASP.NET Core, and the best practices for building microservices in the context of an e-commerce system.
MongoDB Atlas: Unveiling the Power What is MongoDB Atlas?</description></item><item><title>Exploring GraphQL With .NET Core</title><link>https://gosang.github.io/posts/dotnet/exploring-graphql-with-dotnet-core/</link><pubDate>Thu, 27 May 2021 18:01:02 +0000</pubDate><guid>https://gosang.github.io/posts/dotnet/exploring-graphql-with-dotnet-core/</guid><description>Understanding GraphQL GraphQL, developed by Facebook, is a query language for APIs that provides a more efficient, flexible, and powerful alternative to traditional REST APIs. Released in 2015, GraphQL allows clients to request exactly the data they need, addressing common issues associated with REST, such as over-fetching and under-fetching of data.
Why GraphQL? The primary goal of GraphQL is to optimize data retrieval. Traditional REST APIs often force clients to accept fixed responses, leading to over-fetching (receiving more data than necessary) or under-fetching (not receiving enough data, necessitating multiple requests).</description></item></channel></rss>