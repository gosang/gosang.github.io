<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ASP.NET Core on</title><link>https://gosang.github.io/tags/asp.net-core/</link><description>Recent content in ASP.NET Core on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 21 Jan 2024 16:58:14 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/asp.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Dapper With ASP.Core 6</title><link>https://gosang.github.io/posts/datastore/implementing-dapper-with-asp-dotnet-core-6/</link><pubDate>Sun, 21 Jan 2024 16:58:14 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/implementing-dapper-with-asp-dotnet-core-6/</guid><description>Introduction In the realm of data access in ASP.NET Core 6, developers often face choices between various Object-Relational Mapping (ORM) tools. One such tool that has gained popularity is Dapper. In this blog post, we will delve into what Dapper is, its rationale, and how it can be effectively implemented in an ASP.NET Core 6 E-Commerce system.
Understanding Dapper What is Dapper? Dapper is a simple, lightweight, and high-performance micro ORM developed by the creators of Stack Overflow.</description></item><item><title>Implementing Entity Framework Core 6 With ASP.NET Core 6</title><link>https://gosang.github.io/posts/datastore/implementing-entity-framework-core-6-with-asp.net-core-6/</link><pubDate>Sat, 20 Jan 2024 11:50:54 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/implementing-entity-framework-core-6-with-asp.net-core-6/</guid><description>Introduction Entity Framework (EF) Core 6, coupled with ASP.NET Core 6, brings robust data access capabilities to the table, making it a preferred choice for building scalable and modular applications. In this blog post, we will explore the integration of EF Core 6 into an e-commerce system using .NET Core services and APIs.
What is EF Core 6 in ASP.NET Core 6? Entity Framework Core 6 is an Object-Relational Mapping (ORM) framework that simplifies database access in .</description></item><item><title>Implementing TTL (Time To Live) Feature in Mongodb Atlas With Dotnet Core</title><link>https://gosang.github.io/posts/datastore/implementing-ttl-feature-in-mongodb-atlas-with-dotnet-core/</link><pubDate>Sat, 13 Jan 2024 12:42:54 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/implementing-ttl-feature-in-mongodb-atlas-with-dotnet-core/</guid><description>Introduction MongoDB, a popular NoSQL database, offers a unique feature called Time to Live (TTL), which allows documents to automatically expire after a specified period. In this blog post, we will explore the concept of TTL, its rationale, and how to implement it in an ASP.NET Core application using the MongoDB driver. We will use an e-commerce system as a case study to demonstrate the practical application of TTL in the context of microservices.</description></item><item><title>Implementing Mongodb Atlas With ASP.NET Core Using CQRS</title><link>https://gosang.github.io/posts/datastore/implementing-mongodb-atlas-with-dotnet-core-using-cqrs/</link><pubDate>Mon, 27 Jun 2022 18:01:02 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/implementing-mongodb-atlas-with-dotnet-core-using-cqrs/</guid><description>Introduction In modern application development, choosing the right database solution is crucial for building scalable and efficient systems. MongoDB Atlas, combined with ASP.NET Core and the CQRS (Command Query Responsibility Segregation) pattern, offers a powerful and flexible solution for developing microservices-based applications. This technical blog aims to guide you through the process of implementing MongoDB Atlas with ASP.NET Core using the CQRS pattern, covering key aspects such as MediatR, Docker, and best practices.</description></item><item><title>Mongodb Atlas With .NET Core</title><link>https://gosang.github.io/posts/datastore/mongodb-atlas-with-dotnet-core/</link><pubDate>Sun, 27 Mar 2022 18:01:02 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/mongodb-atlas-with-dotnet-core/</guid><description>Introduction In modern web development, choosing the right database solution is pivotal to building scalable and robust applications. MongoDB Atlas, coupled with ASP.NET Core, offers a compelling combination for developers seeking flexibility, scalability, and ease of development. This technical blog aims to provide a comprehensive understanding of MongoDB Atlas, its integration with ASP.NET Core, and the best practices for building microservices in the context of an e-commerce system.
MongoDB Atlas: Unveiling the Power What is MongoDB Atlas?</description></item><item><title>Exploring GraphQL With .NET Core</title><link>https://gosang.github.io/posts/dotnet/exploring-graphql-with-dotnet-core/</link><pubDate>Thu, 27 May 2021 18:01:02 +0000</pubDate><guid>https://gosang.github.io/posts/dotnet/exploring-graphql-with-dotnet-core/</guid><description>Understanding GraphQL GraphQL, developed by Facebook, is a query language for APIs that provides a more efficient, flexible, and powerful alternative to traditional REST APIs. Released in 2015, GraphQL allows clients to request exactly the data they need, addressing common issues associated with REST, such as over-fetching and under-fetching of data.
Why GraphQL? The primary goal of GraphQL is to optimize data retrieval. Traditional REST APIs often force clients to accept fixed responses, leading to over-fetching (receiving more data than necessary) or under-fetching (not receiving enough data, necessitating multiple requests).</description></item></channel></rss>