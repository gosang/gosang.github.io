<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unique Identifiers on</title><link>https://gosang.github.io/tags/unique-identifiers/</link><description>Recent content in Unique Identifiers on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 28 Sep 2024 17:59:39 +0100</lastBuildDate><atom:link href="https://gosang.github.io/tags/unique-identifiers/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing UUID in ASP.NET Core 8</title><link>https://gosang.github.io/posts/dotnet/implementing-uuid-in-asp-dotnet-core/</link><pubDate>Sat, 28 Sep 2024 17:59:39 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/implementing-uuid-in-asp-dotnet-core/</guid><description>In this technical blog, we will look into the implementation of UUIDs in a .NET Core 8 application. We will cover what UUIDs are, their key concepts, how they differ from GUIDs, and provide a detailed example of implementing UUIDs in a .NET Core 8 API project. We will also discuss the advantages and disadvantages of using UUIDs, when to use them, and best practices to follow.
What are UUIDs? UUID stands for Universally Unique Identifier.</description></item><item><title>Implementing GUID in ASP.NET Core</title><link>https://gosang.github.io/posts/dotnet/implementing-guid-in-asp-dotnet-core/</link><pubDate>Sun, 08 Sep 2024 16:45:16 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/implementing-guid-in-asp-dotnet-core/</guid><description>GUIDs (Globally Unique Identifiers) are a fundamental concept in software development, particularly in .NET Core. They provide a way to generate unique values across different contexts, ensuring that identifiers don&amp;rsquo;t collide. This blog will look into what GUIDs are, their rationale, key concepts, functions, and the differences between GUID and UUID. We&amp;rsquo;ll also provide a comprehensive guide to implementing GUIDs in a sample .NET Core 8 API project, along with a discussion on their advantages, disadvantages, and best practices.</description></item></channel></rss>