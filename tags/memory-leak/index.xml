<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memory Leak on</title><link>https://gosang.github.io/tags/memory-leak/</link><description>Recent content in Memory Leak on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 02 Feb 2025 20:34:35 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/memory-leak/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Memory Leaks in JavaScript and How to Prevent Them</title><link>https://gosang.github.io/posts/react/understanding-memory-leaks-in-javascript-and-how-to-prevent-them/</link><pubDate>Sun, 02 Feb 2025 20:34:35 +0000</pubDate><guid>https://gosang.github.io/posts/react/understanding-memory-leaks-in-javascript-and-how-to-prevent-them/</guid><description>Memory management is crucial in software development, even in a language like JavaScript, which features automatic garbage collection. Memory leaks occur when memory that is no longer needed is not released, leading to performance issues over time. In this blog, we will look into memory leaks in JavaScript, their causes, and prevention techniques, with clear examples and best practices.
What Are Memory Leaks in JavaScript? A memory leak happens when a program unintentionally retains memory that it no longer needs, causing the application to consume more memory than required.</description></item></channel></rss>