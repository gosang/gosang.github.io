<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Template Method on</title><link>https://gosang.github.io/tags/template-method/</link><description>Recent content in Template Method on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 May 2020 12:24:18 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/template-method/index.xml" rel="self" type="application/rss+xml"/><item><title>Template Method Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/template-method-pattern/</link><pubDate>Sat, 23 May 2020 12:24:18 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/template-method-pattern/</guid><description>The Template Method Pattern is a fundamental design pattern in software development that provides a framework for defining the structure of an algorithm while allowing specific steps of the algorithm to be implemented by derived classes. In this blog, we will explore the Template Method Pattern in detail, including its rationale, how it&amp;rsquo;s used in C# .NET Core, and its relevance in both microservices and modular monolithic applications. We&amp;rsquo;ll also delve into its advantages and disadvantages, use cases, best practices, and recommendations.</description></item></channel></rss>