<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MongoDB on</title><link>https://gosang.github.io/tags/mongodb/</link><description>Recent content in MongoDB on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Mar 2025 12:27:06 +0100</lastBuildDate><atom:link href="https://gosang.github.io/tags/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Range-Based Pagination with MongoDB C# Driver in ASP.NET Core 8</title><link>https://gosang.github.io/posts/dotnet/implementing-range-based-pagination-with-mongodb-csharp-driver-in-asp-dotnet-core/</link><pubDate>Sat, 08 Mar 2025 12:27:06 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/implementing-range-based-pagination-with-mongodb-csharp-driver-in-asp-dotnet-core/</guid><description>Pagination is essential for handling large datasets efficiently in web applications. While traditional offset-based pagination (using skip and limit) works well for small datasets, it can become inefficient for large collections due to performance degradation. Range-based pagination, also known as keyset pagination, is a more performant alternative that uses indexed fields (like timestamps or IDs) to retrieve results.
This blog post will explain how to implement Range-Based Pagination with the MongoDB C# driver in ASP.</description></item><item><title>Implementing Pagination with MongoDB C# Driver in ASP.NET Core 8</title><link>https://gosang.github.io/posts/dotnet/implementing-pagination-with-mongodb-csharp-driver-in-asp-dotnet-core/</link><pubDate>Sun, 02 Mar 2025 12:27:06 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/implementing-pagination-with-mongodb-csharp-driver-in-asp-dotnet-core/</guid><description>Pagination is a crucial aspect of application development, especially when dealing with large datasets in databases. It ensures that data is fetched in manageable chunks, improving performance and user experience. In this blog, we’ll explore how to implement pagination using the MongoDB C# driver in an ASP.NET Core 8 API project. We’ll cover the key concepts, functions, and best practices while discussing when and when not to use pagination.
What is Pagination?</description></item><item><title>Implementing TTL (Time To Live) Feature in Mongodb Atlas With Dotnet Core</title><link>https://gosang.github.io/posts/datastore/implementing-ttl-feature-in-mongodb-atlas-with-dotnet-core/</link><pubDate>Sat, 13 Jan 2024 12:42:54 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/implementing-ttl-feature-in-mongodb-atlas-with-dotnet-core/</guid><description>Introduction MongoDB, a popular NoSQL database, offers a unique feature called Time to Live (TTL), which allows documents to automatically expire after a specified period. In this blog post, we will explore the concept of TTL, its rationale, and how to implement it in an ASP.NET Core application using the MongoDB driver. We will use an e-commerce system as a case study to demonstrate the practical application of TTL in the context of microservices.</description></item><item><title>Implementing Mongodb Atlas With ASP.NET Core Using CQRS</title><link>https://gosang.github.io/posts/datastore/implementing-mongodb-atlas-with-dotnet-core-using-cqrs/</link><pubDate>Mon, 27 Jun 2022 18:01:02 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/implementing-mongodb-atlas-with-dotnet-core-using-cqrs/</guid><description>Introduction In modern application development, choosing the right database solution is crucial for building scalable and efficient systems. MongoDB Atlas, combined with ASP.NET Core and the CQRS (Command Query Responsibility Segregation) pattern, offers a powerful and flexible solution for developing microservices-based applications. This technical blog aims to guide you through the process of implementing MongoDB Atlas with ASP.NET Core using the CQRS pattern, covering key aspects such as MediatR, Docker, and best practices.</description></item><item><title>Mongodb Atlas With .NET Core</title><link>https://gosang.github.io/posts/datastore/mongodb-atlas-with-dotnet-core/</link><pubDate>Sun, 27 Mar 2022 18:01:02 +0000</pubDate><guid>https://gosang.github.io/posts/datastore/mongodb-atlas-with-dotnet-core/</guid><description>Introduction In modern web development, choosing the right database solution is pivotal to building scalable and robust applications. MongoDB Atlas, coupled with ASP.NET Core, offers a compelling combination for developers seeking flexibility, scalability, and ease of development. This technical blog aims to provide a comprehensive understanding of MongoDB Atlas, its integration with ASP.NET Core, and the best practices for building microservices in the context of an e-commerce system.
MongoDB Atlas: Unveiling the Power What is MongoDB Atlas?</description></item></channel></rss>