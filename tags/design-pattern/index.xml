<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Pattern on</title><link>https://gosang.github.io/tags/design-pattern/</link><description>Recent content in Design Pattern on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 27 Jul 2024 11:50:37 +0100</lastBuildDate><atom:link href="https://gosang.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Result Pattern in ASP.NET Core</title><link>https://gosang.github.io/posts/dotnet/result-pattern-in-asp-dotnet-core/</link><pubDate>Sat, 27 Jul 2024 11:50:37 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/result-pattern-in-asp-dotnet-core/</guid><description>The Result Pattern is a design pattern that encapsulates the outcome of a function, including both the success and error states. It is particularly useful in APIs to provide clear, consistent, and structured responses. In this blog, we will explore what the Result Pattern is, its rationale, key concepts, functions, differences from exceptions, and its practical implementation in an ASP.NET Core 8 project. We&amp;rsquo;ll also discuss the advantages, disadvantages, and best practices for using the Result Pattern.</description></item></channel></rss>