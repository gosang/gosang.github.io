<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Decorator on</title><link>https://gosang.github.io/tags/decorator/</link><description>Recent content in Decorator on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Aug 2020 12:27:13 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/decorator/index.xml" rel="self" type="application/rss+xml"/><item><title>Decorator Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/decorator-pattern/</link><pubDate>Fri, 28 Aug 2020 12:27:13 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/decorator-pattern/</guid><description>In software development, design patterns play a pivotal role in structuring and organizing code to make it more maintainable and extensible. One such design pattern that proves to be invaluable in enhancing the functionality of objects without altering their structure is the Decorator Pattern. In this blog, we will look into the Decorator Pattern, its rationale, implementation in C# .NET Core, and how it can be beneficial for microservices and modular monolithic applications.</description></item></channel></rss>