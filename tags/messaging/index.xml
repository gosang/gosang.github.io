<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Messaging on</title><link>https://gosang.github.io/tags/messaging/</link><description>Recent content in Messaging on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 30 Aug 2023 13:58:28 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/messaging/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Event Bus With RabbitMQ in .NET Core</title><link>https://gosang.github.io/posts/design-principles/messaging/implementing-event-bus-with-rabbitmq-in-dotnet-core/</link><pubDate>Wed, 30 Aug 2023 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/messaging/implementing-event-bus-with-rabbitmq-in-dotnet-core/</guid><description>As a Software Engineer, you understand the importance of efficient communication between components in a distributed system. In this blog post, we&amp;rsquo;ll explore the implementation of an event bus with RabbitMQ in .NET Core, focusing on an e-commerce system built using .NET Core services and APIs. We&amp;rsquo;ll leverage MediatR for CQRS, AutoMapper for object mapping, EF Core InMemory database for simplicity, and xUnit for unit tests. Let&amp;rsquo;s dive into the rationale, implementation steps, advantages, and best practices.</description></item><item><title>Using RabbitMQ with ASP.NET Core</title><link>https://gosang.github.io/posts/design-principles/messaging/rabbitmq-with-dotnet-core/</link><pubDate>Wed, 29 Jun 2022 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/messaging/rabbitmq-with-dotnet-core/</guid><description>In the ever-evolving landscape of modern software development, efficient communication between components is crucial. As applications grow in complexity and adopt microservices architecture, a reliable message broker is essential. RabbitMQ, a powerful open-source message broker, has become a cornerstone technology for achieving scalable and robust communication between different parts of an application. In this blog, we will dive deep into RabbitMQ, explain its rationale, explore how it resolves common problems, and demonstrate its usage with ASP.</description></item><item><title>Apache Kafka With .NET Core</title><link>https://gosang.github.io/posts/design-principles/messaging/apache-kafka-with-dotnet-core/</link><pubDate>Sat, 09 Apr 2022 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/messaging/apache-kafka-with-dotnet-core/</guid><description>Introduction Apache Kafka has emerged as a game-changer in the realm of distributed systems, offering a robust and scalable solution for building event-driven architectures. In this technical blog, we will look into the intricacies of Apache Kafka, exploring its core concepts, implementation in a .NET Core e-commerce system, and discussing the advantages, disadvantages, issues, and best practices associated with its use.
Understanding Apache Kafka What is Apache Kafka? Apache Kafka is a distributed streaming platform that excels at handling real-time data feeds and creating scalable, fault-tolerant, and high-throughput messaging systems.</description></item><item><title>Publish–subscribe Pattern</title><link>https://gosang.github.io/posts/design-patterns/microservices/publishsubscribe-pattern/</link><pubDate>Thu, 09 Sep 2021 19:18:44 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/microservices/publishsubscribe-pattern/</guid><description>The Publish–Subscribe pattern, a stalwart in the realm of messaging patterns, orchestrates communication between components in a decoupled manner. Here, publishers categorize messages into topics and broadcast them without knowing the identity of subscribers. Subscribers express interest in specific topics, receiving messages related to those topics. Let&amp;rsquo;s look into the intricacies of this pattern, exploring its rationale, problem-solving capabilities, and its implementation in the context of a .NET Core e-commerce system.</description></item></channel></rss>