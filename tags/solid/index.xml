<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SOLID on</title><link>https://gosang.github.io/tags/solid/</link><description>Recent content in SOLID on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Sep 2022 13:13:36 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/solid/index.xml" rel="self" type="application/rss+xml"/><item><title>Single Responsibility Principle (SRP)</title><link>https://gosang.github.io/posts/design-principles/single-responsibility-principle/</link><pubDate>Fri, 16 Sep 2022 13:13:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/single-responsibility-principle/</guid><description>In the realm of software design, the Single Responsibility Principle (SRP) is a fundamental guideline that advocates a class should have only one reason to change. Put simply, a class should have a single responsibility or, in other words, it should do one thing and do it well. This blog post will explore the SRP design principle, its rationale, practical examples in C# .NET Core, and its application.
What is SRP?</description></item><item><title>SOLID Design Principles</title><link>https://gosang.github.io/posts/design-principles/solid/</link><pubDate>Thu, 01 Sep 2022 13:13:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/solid/</guid><description>SOLID is a set of five design principles that aim to create robust, scalable, and maintainable software. These principles were introduced by Robert C. Martin and have become a cornerstone for object-oriented design. In this blog post, we&amp;rsquo;ll delve into each SOLID principle, discuss their rationale, provide practical examples in C# .NET Core, and explore how they can be applied in both monolithic and microservices architectures.
What is SOLID? SOLID is an acronym that represents five design principles:</description></item></channel></rss>