<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Asynchronous programming on</title><link>https://gosang.github.io/tags/asynchronous-programming/</link><description>Recent content in Asynchronous programming on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Jun 2024 11:52:08 +0100</lastBuildDate><atom:link href="https://gosang.github.io/tags/asynchronous-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>The Problem With `async void` in ASP.NET Core</title><link>https://gosang.github.io/posts/dotnet/the-problem-with-async-void-in-asp-dotnet-core/</link><pubDate>Sat, 22 Jun 2024 11:52:08 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/the-problem-with-async-void-in-asp-dotnet-core/</guid><description>In ASP.NET Core, asynchronous programming is a powerful tool for improving the responsiveness and performance of applications. However, improper use of certain asynchronous programming constructs can lead to unexpected issues. One such construct is async void. In this blog, we&amp;rsquo;ll explore the problems with async void, understand its correct usage, and outline best practices for avoiding potential pitfalls.
Understanding async void In C#, an async method can return void, Task, or Task&amp;lt;T&amp;gt;.</description></item></channel></rss>