<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>State on</title><link>https://gosang.github.io/tags/state/</link><description>Recent content in State on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 08 Oct 2020 12:28:51 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/state/index.xml" rel="self" type="application/rss+xml"/><item><title>State Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/state-pattern/</link><pubDate>Thu, 08 Oct 2020 12:28:51 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/state-pattern/</guid><description>State Pattern
Introduction In the ever-evolving landscape of software design, patterns play a crucial role in enhancing maintainability, scalability, and flexibility of code. One such design pattern that proves invaluable in managing state-dependent behavior is the State Pattern. In this blog post, we&amp;rsquo;ll look into the State Pattern, exploring its rationale, application in real-world scenarios, and its advantages and disadvantages.
What is the State Pattern? The State Pattern is a behavioral design pattern that allows an object to alter its behavior when its internal state changes.</description></item></channel></rss>