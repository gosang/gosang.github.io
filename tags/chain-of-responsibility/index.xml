<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chain of Responsibility on</title><link>https://gosang.github.io/tags/chain-of-responsibility/</link><description>Recent content in Chain of Responsibility on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Mar 2022 12:22:44 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/chain-of-responsibility/index.xml" rel="self" type="application/rss+xml"/><item><title>Chain of Responsibility Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/chain-of-responsibility-pattern/</link><pubDate>Tue, 01 Mar 2022 12:22:44 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/chain-of-responsibility-pattern/</guid><description>The Chain of Responsibility Pattern is a behavioral design pattern that allows you to pass requests along a chain of handlers. Each handler can choose to process the request or pass it to the next handler in the chain. This pattern promotes loose coupling between the sender and receiver of a request, making it a powerful tool in building extensible and maintainable software systems. In this blog, we will explore what the Chain of Responsibility Pattern is, its rationale, how it can be used in C# .</description></item></channel></rss>