<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservices on</title><link>https://gosang.github.io/tags/microservices/</link><description>Recent content in Microservices on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 30 Apr 2023 19:18:44 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>Outbox Pattern</title><link>https://gosang.github.io/posts/design-patterns/microservices/outbox-pattern/</link><pubDate>Sun, 30 Apr 2023 19:18:44 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/microservices/outbox-pattern/</guid><description>In the realm of microservices and modular monolithic architectures, managing distributed transactions and ensuring data consistency across services can be challenging. The Outbox Design Pattern is a powerful solution to address these challenges. In this blog, we will delve into the intricacies of the Outbox Design Pattern, its rationale, implementation using Entity Framework Core 6 in C# .NET Core, and discuss its advantages, disadvantages, use cases, and best practices.
What is the Outbox Design Pattern?</description></item><item><title>Strangler Pattern</title><link>https://gosang.github.io/posts/design-patterns/microservices/strangler-pattern/</link><pubDate>Sun, 09 Apr 2023 19:18:44 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/microservices/strangler-pattern/</guid><description>In the realm of software development, the Strangler Pattern emerges as a strategic approach to modernizing applications. It offers a gradual migration from monolithic architectures to microservices, allowing developers to replace components without disrupting the entire system. This blog post explores the Strangler Pattern, its application in an e-commerce system using .NET, and best practices for a smooth transition.
What is the Strangler Pattern? The Strangler Pattern, coined by Martin Fowler, is a migration strategy that involves incrementally replacing components of an existing system.</description></item><item><title>Event Sourcing Design Pattern</title><link>https://gosang.github.io/posts/design-patterns/event-sourcing-pattern/</link><pubDate>Sat, 18 Mar 2023 08:49:40 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/event-sourcing-pattern/</guid><description>Event Sourcing is a powerful design pattern that has gained significant traction in the software development world. This pattern offers a novel approach to managing data changes, particularly in the context of microservices and modular monolithic architectures. In this guide, we will provide a detailed exploration of Event Sourcing, covering what it is, why it&amp;rsquo;s used, practical examples using C# .NET Core, the advantages and disadvantages, when to use it, and best practices.</description></item><item><title>Command Query Responsibility Segregation (CQRS)</title><link>https://gosang.github.io/posts/design-patterns/command-query-responsibility-segregation/</link><pubDate>Wed, 01 Mar 2023 19:18:44 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/command-query-responsibility-segregation/</guid><description>In the ever-evolving world of software architecture, Command Query Responsibility Segregation (CQRS) has emerged as a powerful design pattern. CQRS is all about separating the responsibilities of executing commands (actions that change the state of an application) and handling queries (read-only operations).
In this article, we&amp;rsquo;ll delve deep into CQRS, exploring what it is, the rationale behind it, the problems it solves, practical usage with C# .NET Core Web API and repositories, and its advantages and disadvantages.</description></item><item><title>Microservices Design Architecture</title><link>https://gosang.github.io/posts/design-architectures/microservices/</link><pubDate>Sun, 15 Jan 2023 13:58:28 +0000</pubDate><guid>https://gosang.github.io/posts/design-architectures/microservices/</guid><description>In the ever-evolving landscape of software development, Microservices Design Architecture has emerged as a game-changer. This architectural paradigm brings flexibility, scalability, and maintainability to the forefront. In this blog, we&amp;rsquo;ll take a deep dive into what microservices are, their key concepts, design architecture, and when to leverage this approach for building robust systems.
What are Microservices? Microservices is an architectural style where a software application is composed of small, independent services that communicate with each other through well-defined APIs.</description></item></channel></rss>