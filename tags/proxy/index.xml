<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Proxy on</title><link>https://gosang.github.io/tags/proxy/</link><description>Recent content in Proxy on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Jun 2021 12:26:08 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/proxy/index.xml" rel="self" type="application/rss+xml"/><item><title>Proxy Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/proxy-pattern/</link><pubDate>Tue, 15 Jun 2021 12:26:08 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/proxy-pattern/</guid><description>When building complex software systems, especially in the context of microservices or modular monolithic applications, managing resources efficiently and controlling access to them becomes crucial. The Proxy Pattern is a powerful design pattern that helps solve these challenges by providing a surrogate or placeholder for another object to control its access. In this blog, we will dive deep into the Proxy Pattern, explore its rationale, use cases, advantages, disadvantages, and best practices.</description></item></channel></rss>