<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interpreter on</title><link>https://gosang.github.io/tags/interpreter/</link><description>Recent content in Interpreter on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 23 Feb 2021 13:00:16 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/interpreter/index.xml" rel="self" type="application/rss+xml"/><item><title>Interpreter Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/interpreter-pattern/</link><pubDate>Tue, 23 Feb 2021 13:00:16 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/interpreter-pattern/</guid><description>In the realm of design patterns, the Interpreter pattern stands out as a powerful tool for solving specific types of problems. This blog post will look into the intricacies of the Interpreter pattern, exploring what it is, its rationale, applications in the context of microservices or modular monolithic architectures, and providing practical examples using C# .NET Core.
What is the Interpreter Pattern? The Interpreter pattern falls under the behavioral design patterns category.</description></item></channel></rss>