<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Factory Pattern on</title><link>https://gosang.github.io/tags/factory-pattern/</link><description>Recent content in Factory Pattern on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Aug 2022 13:19:18 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/factory-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Factory Pattern</title><link>https://gosang.github.io/posts/design-patterns/creational/factory-pattern/</link><pubDate>Tue, 02 Aug 2022 13:19:18 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/creational/factory-pattern/</guid><description>Design patterns play a crucial role in creating modular, scalable, and maintainable software. Among them, Factory Patterns are widely used to encapsulate object creation, providing a flexible way to instantiate objects without specifying their exact classes. In this blog, we&amp;rsquo;ll explore three types of Factory Patterns: Concrete, Static, and Abstract, discussing their rationale, usage in an e-commerce system with C# .NET Core examples, advantages, disadvantages, and best practices.
Factory Patterns Overview What is a Factory Pattern?</description></item></channel></rss>