<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DI on</title><link>https://gosang.github.io/tags/di/</link><description>Recent content in DI on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 May 2023 13:13:36 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/di/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency Inversion Principle (DIP) and Dependency Injection (DI)</title><link>https://gosang.github.io/posts/design-principles/solid/dependency-inversion-principle/</link><pubDate>Thu, 04 May 2023 13:13:36 +0000</pubDate><guid>https://gosang.github.io/posts/design-principles/solid/dependency-inversion-principle/</guid><description>In the ever-evolving landscape of software design, the Dependency Inversion Principle (DIP) and Dependency Injection (DI) pattern shine as beacons of flexibility and maintainability. Both concepts, integral to the SOLID principles, play a pivotal role in creating loosely coupled and scalable systems. In this blog post, we&amp;rsquo;ll explore the Dependency Inversion Principle, look into the Dependency Injection pattern, and discuss their application in the context of e-commerce using C# .NET Core.</description></item></channel></rss>