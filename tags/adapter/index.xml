<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Adapter on</title><link>https://gosang.github.io/tags/adapter/</link><description>Recent content in Adapter on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Jul 2021 08:37:58 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/adapter/index.xml" rel="self" type="application/rss+xml"/><item><title>Adapter Pattern</title><link>https://gosang.github.io/posts/design-patterns/structural/adapter-pattern/</link><pubDate>Thu, 22 Jul 2021 08:37:58 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/structural/adapter-pattern/</guid><description>In the world of software development, you often encounter scenarios where you need to integrate new components or systems with existing ones. These components may not always speak the same &amp;ldquo;language,&amp;rdquo; and bridging this gap can be a challenging task. That&amp;rsquo;s where the Adapter Pattern comes to the rescue. In this blog, we will dive deep into the Adapter Pattern, understand its purpose, see how it resolves integration problems, and explore its usage in the context of microservices and modular monolithic applications using C# .</description></item></channel></rss>