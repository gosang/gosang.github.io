<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Context on</title><link>https://gosang.github.io/tags/context/</link><description>Recent content in Context on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 16 Feb 2025 20:34:35 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/context/index.xml" rel="self" type="application/rss+xml"/><item><title>Zustand, Redux and Context: Choosing the Right State Management Solution</title><link>https://gosang.github.io/posts/react/zustand-redux-context-choosing-the-right-state-management-solution/</link><pubDate>Sun, 16 Feb 2025 20:34:35 +0000</pubDate><guid>https://gosang.github.io/posts/react/zustand-redux-context-choosing-the-right-state-management-solution/</guid><description>State management is a critical aspect of building scalable and maintainable React and Next.js applications. With various options available, developers often find themselves evaluating libraries like Zustand, Redux, and React Context API. Each solution has unique strengths, use cases, and trade-offs. In this blog, weâ€™ll explore these state management tools thoroughly, using TypeScript-based examples to provide insights into their implementation and best practices for React and Next.js projects.
Zustand, Redux, and Context API Zustand Zustand is a small, fast, and scalable state management library for React.</description></item></channel></rss>