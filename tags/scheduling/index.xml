<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scheduling on</title><link>https://gosang.github.io/tags/scheduling/</link><description>Recent content in Scheduling on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Jul 2024 11:05:40 +0100</lastBuildDate><atom:link href="https://gosang.github.io/tags/scheduling/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Hangfire with ASP.NET Core and Worker Services</title><link>https://gosang.github.io/posts/dotnet/using-hangfire-with-asp-dotnet-core-and-worker-services/</link><pubDate>Mon, 15 Jul 2024 11:05:40 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/using-hangfire-with-asp-dotnet-core-and-worker-services/</guid><description>In modern web development, background tasks are essential for offloading time-consuming operations, such as sending emails, processing files, or performing scheduled maintenance. Hangfire is a robust library for handling background jobs in .NET applications. This blog will look into using Hangfire with ASP.NET Core and worker services, covering its concepts, implementation, and best practices.
What is Hangfire? Hangfire is an open-source library that simplifies the creation and management of background jobs in .</description></item><item><title>Using Quartz.NET with ASP.NET Core and Worker Services</title><link>https://gosang.github.io/posts/dotnet/using-quartz-dotnet-with-asp-dotnet-core-and-worker-services/</link><pubDate>Sat, 06 Jul 2024 12:06:52 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/using-quartz-dotnet-with-asp-dotnet-core-and-worker-services/</guid><description>Quartz.NET is a powerful, open-source job scheduling library that can be easily integrated with ASP.NET Core and worker services. It is designed for scheduling jobs within your application, providing a robust way to manage background tasks, timed operations, and complex job workflows.
In this blog, we will explore the fundamentals of Quartz.NET, its integration with ASP.NET Core and worker services, and provide a detailed example using .NET Core 8. We will also discuss the advantages, disadvantages, best practices, and considerations for using Quartz.</description></item></channel></rss>