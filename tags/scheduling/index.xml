<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scheduling on</title><link>https://gosang.github.io/tags/scheduling/</link><description>Recent content in Scheduling on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 06 Jul 2024 12:06:52 +0100</lastBuildDate><atom:link href="https://gosang.github.io/tags/scheduling/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Quartz.NET with ASP.NET Core and Worker Services</title><link>https://gosang.github.io/posts/dotnet/using-quartz-dotnet-with-asp-dotnet-core-and-worker-services/</link><pubDate>Sat, 06 Jul 2024 12:06:52 +0100</pubDate><guid>https://gosang.github.io/posts/dotnet/using-quartz-dotnet-with-asp-dotnet-core-and-worker-services/</guid><description>Quartz.NET is a powerful, open-source job scheduling library that can be easily integrated with ASP.NET Core and worker services. It is designed for scheduling jobs within your application, providing a robust way to manage background tasks, timed operations, and complex job workflows.
In this blog, we will explore the fundamentals of Quartz.NET, its integration with ASP.NET Core and worker services, and provide a detailed example using .NET Core 8. We will also discuss the advantages, disadvantages, best practices, and considerations for using Quartz.</description></item></channel></rss>