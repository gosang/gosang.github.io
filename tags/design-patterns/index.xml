<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Patterns on</title><link>https://gosang.github.io/tags/design-patterns/</link><description>Recent content in Design Patterns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Jul 2022 13:09:32 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Prototype Pattern</title><link>https://gosang.github.io/posts/design-patterns/creational/prototype-pattern/</link><pubDate>Mon, 04 Jul 2022 13:09:32 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/creational/prototype-pattern/</guid><description>The Prototype pattern is a creational design pattern that focuses on creating objects by copying an existing object, known as the prototype. This pattern allows you to create new objects by duplicating an existing one, providing a convenient way to produce new instances without specifying their exact types. In this blog post, we&amp;rsquo;ll explore the Prototype pattern, its rationale, implementation in C# .NET Core, and its relevance in the context of microservices and modular monolithic architectures.</description></item><item><title>Observer Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/observer-pattern/</link><pubDate>Tue, 07 Jun 2022 12:40:53 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/observer-pattern/</guid><description>In software development, designing systems that are flexible, scalable, and maintainable is paramount. One of the key challenges is establishing a communication mechanism between components without tight coupling. The Observer pattern provides an elegant solution to this problem. In this blog, we&amp;rsquo;ll delve into the intricacies of the Observer pattern, explore its applications in an e-commerce system using C# .NET Core, and discuss best practices.
Understanding the Observer Pattern The Observer pattern is a behavioral design pattern where an object, known as the subject, maintains a list of its dependents, called observers, that are notified of state changes.</description></item></channel></rss>