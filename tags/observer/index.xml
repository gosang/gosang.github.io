<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Observer on</title><link>https://gosang.github.io/tags/observer/</link><description>Recent content in Observer on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Oct 2021 12:40:53 +0000</lastBuildDate><atom:link href="https://gosang.github.io/tags/observer/index.xml" rel="self" type="application/rss+xml"/><item><title>Observer Pattern</title><link>https://gosang.github.io/posts/design-patterns/behavioral/observer-pattern/</link><pubDate>Wed, 13 Oct 2021 12:40:53 +0000</pubDate><guid>https://gosang.github.io/posts/design-patterns/behavioral/observer-pattern/</guid><description>In software development, designing systems that are flexible, scalable, and maintainable is paramount. One of the key challenges is establishing a communication mechanism between components without tight coupling. The Observer pattern provides an elegant solution to this problem. In this blog, we&amp;rsquo;ll delve into the intricacies of the Observer pattern, explore its applications in an e-commerce system using C# .NET Core, and discuss best practices.
Understanding the Observer Pattern The Observer pattern is a behavioral design pattern where an object, known as the subject, maintains a list of its dependents, called observers, that are notified of state changes.</description></item></channel></rss>